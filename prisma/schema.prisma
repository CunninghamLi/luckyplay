generator client {
  provider = "prisma-client-js"
  seed = "ts-node --transpile-only prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  wallet        Wallet?
  bets          Bet[]
  faucetClaim   FaucetClaim?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  userId  String  @id
  credits Int     @default(0)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  game      String
  wager     Int
  outcome   String
  payout    Int
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model FaucetClaim {
  userId String @id
  amount Int
  at     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
